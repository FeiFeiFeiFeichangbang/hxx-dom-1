{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","style","node","name","value","arguments","length","Object","object","key","find","selector","scope","querySelectorAll","each","nodeList","fn","i","call","index","list","children","parentNode"],"mappings":"AAAAA,MAAM,CAACC,GAAP,GAAa;AACTC,EAAAA,MADS,kBACFC,MADE,EACK;AAAC;AACf,QAAMC,SAAS,GAAIC,QAAQ,CAACC,aAAT,CAAuB,UAAvB,CAAnB,CADc,CAEd;;AACAF,IAAAA,SAAS,CAACG,SAAV,GAAsBJ,MAAM,CAACK,IAAP,EAAtB,CAHc,CAGsB;;AACpC,WAAOJ,SAAS,CAACK,OAAV,CAAkBC,UAAzB,CAJc,CAIsB;AACpC,GANS;AAQTC,EAAAA,KARS,iBAQHC,IARG,EAQEC,IARF,EAQOC,KARP,EAQa;AAAC;AACnB,QAAGC,SAAS,CAACC,MAAV,KAAmB,CAAtB,EAAwB;AACpB;AACAJ,MAAAA,IAAI,CAACD,KAAL,CAAWE,IAAX,IAAmBC,KAAnB;AACH,KAHD,MAGM,IAAGC,SAAS,CAACC,MAAV,KAAmB,CAAtB,EAAwB;AAC1B,UAAG,OAAOH,IAAP,KAAgB,QAAnB,EAA4B;AAC5B;AACA,eAAOD,IAAI,CAACD,KAAL,CAAWE,IAAX,CAAP;AACC,OAHD,MAGM,IAAGA,IAAI,YAAYI,MAAnB,EAA0B;AAAC;AAC7B;AACA,YAAMC,MAAM,GAAGL,IAAf;;AACA,aAAI,IAAIM,GAAR,IAAeD,MAAf,EAAsB;AAClB;AACA;AACA;AACAN,UAAAA,IAAI,CAACD,KAAL,CAAWQ,GAAX,IAAkBD,MAAM,CAACC,GAAD,CAAxB;AACH;AACJ;AACJ;AACJ,GA3BQ;AA6BTC,EAAAA,IA7BS,gBA6BJC,QA7BI,EA6BKC,KA7BL,EA6BW;AAAC;AACjB,WAAO,CAACA,KAAK,IAAIjB,QAAV,EAAoBkB,gBAApB,CAAqCF,QAArC,CAAP;AACH,GA/BQ;AAiCTG,EAAAA,IAjCS,gBAiCJC,QAjCI,EAiCKC,EAjCL,EAiCQ;AAAC;AACd,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACF,QAAQ,CAACT,MAAvB,EAA8BW,CAAC,EAA/B,EAAkC;AAC9BD,MAAAA,EAAE,CAACE,IAAH,CAAQ,IAAR,EAAaH,QAAQ,CAACE,CAAD,CAArB;AACH;AACJ,GArCQ;AAsCTE,EAAAA,KAtCS,iBAsCHjB,IAtCG,EAsCE;AACP,QAAMkB,IAAI,GAAG7B,GAAG,CAAC8B,QAAJ,CAAanB,IAAI,CAACoB,UAAlB,CAAb;AACA,QAAIL,CAAJ;;AACA,SAAIA,CAAC,GAAC,CAAN,EAAQA,CAAC,GAACG,IAAI,CAACd,MAAf,EAAsBW,CAAC,EAAvB,EAA0B;AACvB,UAAGG,IAAI,CAACH,CAAD,CAAJ,KAAYf,IAAf,EAAoB;AACf;AACH;AACJ;;AACD,WAAOe,CAAP;AACH;AA/CQ,CAAb","file":"dom.1d0b6d56.js","sourceRoot":"../src","sourcesContent":["window.dom = {\n    create(string){//创建新节点 万能创建方法\n    const container =  document.createElement(\"template\");\n    //template标签是容纳所有元素\n    container.innerHTML = string.trim();//trim（）把字符串两边的空格去掉\n    return container.content.firstChild;//这样写才可以获取 记住\n   },\n\n    style(node,name,value){//用于修改style\n        if(arguments.length===3){\n            //dom.style(div,'color','red')\n            node.style[name] = value\n        }else if(arguments.length===2){\n            if(typeof name === 'string'){\n            // dom.style(div,'color')\n            return node.style[name]\n            }else if(name instanceof Object){//如果name是object的实例\n                //dom.style(div,{color:'red'})\n                const object = name\n                for(let key in object){\n                    // key:border/color\n                    // node.style.border = ...\n                    // node.style.color = ...\n                    node.style[key] = object[key]\n                }\n            }\n        }   \n    },\n\n    find(selector,scope){//用于获取标签或标签们\n        return (scope || document).querySelectorAll(selector)\n    },\n    \n    each(nodeList,fn){//遍历所有节点\n        for(let i=0;i<nodeList.length;i++){\n            fn.call(null,nodeList[i])\n        }\n    },\n    index(node){\n        const list = dom.children(node.parentNode)\n        let i\n        for(i=0;i<list.length;i++){\n           if(list[i] === node){\n                break\n            }\n        }\n        return i\n    }\n};             "]}